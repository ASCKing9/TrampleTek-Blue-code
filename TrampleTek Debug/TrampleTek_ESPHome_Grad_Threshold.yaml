# esphome:
#   name: [Your internal devices name]
#   friendly_name: [The name you gave the device]

# esp32:
#   board: esp32-c3-devkitm-1
#   framework:
#     type: arduino

# # Enable logging
# logger:

# # Enable Home Assistant API
# api:
#   encryption:
#     key: "[The encryption key that you set up, if you installed it]"
# ota:

# wifi:
#   ssid: !secret wifi_ssid
#   password: !secret wifi_password

#   # Enable fallback hotspot (captive portal) in case wifi connection fails
#   ap:
#     ssid: "[your devices wifi]"
#     password: "[your device password]"

# captive_portal:

### Above this line is a typical default ESPHome config.
### You don't need to copy the code above, it is there as reference.
### You only need to paste the code below 

globals:
  - id: step_event_threshold
    type: float
    restore_value: yes
    initial_value: '0.15'
  - id: matGradientReq
    type: float
    restore_value: no
    initial_value: '0.1'

sensor:
  - platform: adc
    pin: 0
    name: "internal pressure voltage"
    id: pressure_adc_voltage
    update_interval: 75ms
    attenuation: auto
    internal: True
    filters:
      - sliding_window_moving_average:
          window_size: 5
          send_every: 1
    on_value:
      then:
        - lambda: |-
            static bool matGradientDownApproved = false;
            static bool matGradientUpApproved = false;
            static bool matDownThresholdLock = false;
            static bool matUpThresholdLock = false;
            static bool justFlippedOff = false;
            static bool justFlippedOn = false;
            static float matDownThreshold = id(pressure_adc_voltage).state - id(step_event_threshold);
            static float matUpThreshold = id(pressure_adc_voltage).state + id(step_event_threshold);
            static unsigned long matDownThresholdCounter;
            static unsigned long matUpThresholdCounter;
            static unsigned long matGradientDownCounter;
            static unsigned long matGradientUpCounter;
            static unsigned long matGradientTimer = 5000;
            static unsigned long matThresholdTimer = 5000;
            static float previous_adc_voltage = 0;
            unsigned long currentTime = millis();
            float matGradient = (id(pressure_adc_voltage).state - previous_adc_voltage) / 0.075;

            if (matGradient < -1 * id(matGradientReq)) {
                matGradientDownApproved = true;
                matGradientDownCounter = currentTime;
                if (matDownThresholdLock == true && justFlippedOff == true) {
                  matDownThresholdLock = false;
                }
                if (matDownThresholdLock == false) {
                  matDownThreshold = id(pressure_adc_voltage).state - id(step_event_threshold);
                  matUpThreshold = id(pressure_adc_voltage).state + 1.0;
                  matDownThresholdLock = true;
                  matDownThresholdCounter = currentTime;
                }
            }

            if (matGradient > id(matGradientReq)) {
              matGradientUpApproved = true;
              matGradientUpCounter = currentTime;
              if (matUpThresholdLock == true && justFlippedOn == true) {
                matUpThresholdLock = false;
              }
              if (matUpThresholdLock == false) {
                matUpThreshold = id(pressure_adc_voltage).state + id(step_event_threshold) * 0.5;
                matDownThreshold = id(pressure_adc_voltage).state - 1.0;
                matUpThresholdLock = true;
                matUpThresholdCounter = currentTime;
              }
            }

            if (matDownThresholdLock) {
              if (currentTime - matDownThresholdCounter >= matThresholdTimer) {
                matDownThresholdLock = false;
              }
            }

            if (matUpThresholdLock) {
              if (currentTime - matUpThresholdCounter >= matThresholdTimer) {
                matUpThresholdLock = false;
              }
            }

            if (matGradientDownApproved == true) {
              if (currentTime - matGradientDownCounter >= matGradientTimer) {
                matGradientDownApproved = false;
              }
            }

            if (matGradientUpApproved == true) {
              if (currentTime - matGradientUpCounter >= matGradientTimer) {
                matGradientUpApproved = false;
              }
            }

            //id(variable_viz1).publish_state(matDownThreshold);
            //id(variable_viz2).publish_state(matUpThreshold);
            justFlippedOn = false;
            justFlippedOff = false;

            if (id(pressure_adc_voltage).state < matDownThreshold && matGradientDownApproved) {
              justFlippedOn = true;
              id(pressure_trigger).turn_on();
            }

            if (id(pressure_adc_voltage).state > matUpThreshold && matGradientUpApproved) {
              justFlippedOff = true;
              id(pressure_trigger).turn_off();
            }

            //id(gradient_viz).publish_state(matGradient);
            previous_adc_voltage = id(pressure_adc_voltage).state;
            

  - platform: template
    name: "Pressure Voltage"
    id: visible_pressure_voltage
    unit_of_measurement: "V"
    icon: "mdi:sine-wave"
    accuracy_decimals: 2
    update_interval: 1s
    lambda: |-
      id(step_threshold_number).publish_state(id(step_event_threshold));
      id(gradient_requirement_number).publish_state(id(matGradientReq));
      return id(pressure_adc_voltage).state;

  # - platform: template
  #   name: "Gradient viz"
  #   id: gradient_viz
  #   unit_of_measurement: "V/s"
  #   icon: "mdi:sine-wave"
  #   accuracy_decimals: 3
  
  # - platform: template
  #   name: "viz thresholdDown"
  #   id: variable_viz1
  #   unit_of_measurement: "S"
  #   icon: "mdi:sine-wave"
  #   accuracy_decimals: 2

  # - platform: template
  #   name: "viz thresholdUp"
  #   id: variable_viz2
  #   unit_of_measurement: "S"
  #   icon: "mdi:sine-wave"
  #   accuracy_decimals: 2

number:
  - platform: template
    name: "Gradient requirement"
    id: gradient_requirement_number
    unit_of_measurement: "V/s"
    update_interval: never
    initial_value: '0.2'
    min_value: 0.02
    max_value: 0.6
    step: 0.02
    optimistic: True
    on_value:
      then:
        - globals.set:
            id: matGradientReq
            value: !lambda "return x;"
   
  - platform: template
    name: "Step Threshold"
    id: step_threshold_number
    unit_of_measurement: "V"
    update_interval: never
    initial_value: '0.2'
    min_value: 0.02
    max_value: 0.5
    step: 0.02
    optimistic: True
    on_value:
      then:
        - globals.set:
            id: step_event_threshold
            value: !lambda "return x;"

switch:
  - platform: template
    name: "Mat Trigger"
    id: pressure_trigger
    optimistic: true
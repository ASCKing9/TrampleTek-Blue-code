esphome:
  name: [Your internal devices name]
  friendly_name: [The name you gave the device]

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "[The encryption key that you set up, if you installed it]"
ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "[your devices wifi]"
    password: "[your device password]"

captive_portal:

### Above this line is the default ESPHome config. Once you get a fresh ESPHome install, paste the code below this line

substitutions:
  step_on_threshold_value: "1.09"
  step_off_threshold_value: "1.10"
  # step_threshold_value: "50"
  # voltage_max_value: "2.5"
  # voltage_min_value: "0.9"

globals:
  - id: step_on_threshold
    type: float
    restore_value: yes
    initial_value: '${step_on_threshold_value}'
  - id: step_off_threshold
    type: float
    restore_value: yes
    initial_value: '${step_off_threshold_value}'
  - id: toggle_state
    type: int
    restore_value: yes
    initial_value: '0'
  # - id: step_threshold
  #   type: float
  #   restore_value: yes
  #   initial_value: '${step_threshold_value}'
  # - id: voltage_max
  #   type: float
  #   restore_value: yes
  #   initial_value: '${voltage_max_value}'
  # - id: voltage_min
  #   type: float
  #   restore_value: yes
  #   initial_value: '${voltage_min_value}'
  # - id: toggle_state
  #   type: int
  #   restore_value: yes
  #   initial_value: '0'

sensor:
  - platform: adc
    pin: 0
    name: "internal pressure voltage"
    id: pressure_adc_voltage
    # unit_of_measurement: "V"
    # icon: "mdi:sine-wave"
    update_interval: 75ms
    attenuation: auto
    internal: True
    filters:
      - sliding_window_moving_average:
          window_size: 3
          send_every: 1
      # - lambda: |-
      #     float pressure_voltage = x;
      #     # pressure_voltage = id(pressure_adc_voltage) * 1.0;

      #     if (pressure_voltage < 1.06) {
      #       id(pressure_trigger).turn_on();
      #       if (id(toggle_state) == 0) {
      #         id(pressure_toggle).toggle();
      #         id(toggle_state) = 1;
      #       }
      #     } else {
      #       id(pressure_trigger).turn_off();
      #       if (id(toggle_state) == 1) {
      #         id(toggle_state) = 0;
      #       }
      #     }
      #     return pressure_voltage;
      # lambda: |-
      #   if (id(my_global_int) > 1) {
      #       id(yled).turn_on();
      #       id(my_global_int) =  id(my_global_int) -1;
      #    } else {
      #       id(yled).turn_off();
      #    }
      #   return {};

    
    on_value_range:
      - below: !lambda return id(step_on_threshold);
        then:
          - lambda: |-
              id(pressure_trigger).turn_on();
      - above: !lambda return id(step_off_threshold);
        then:
          - lambda: |-
              id(pressure_trigger).turn_off();
          
    # on_value:

      # - sensor.template.publish:
      #     id: pressure
      #     state: !lambda 'return id(pressure_adc_voltage).state;'

  - platform: template
    name: "Pressure Voltage"
    id: visible_pressure_voltage
    unit_of_measurement: "V"
    icon: "mdi:sine-wave"
    accuracy_decimals: 2
    update_interval: 1s
    lambda: return id(pressure_adc_voltage).state;

        


  # - platform: template
  #   name: "Pressure"
  #   id: pressure
  #   unit_of_measurement: ""
  #   icon: "mdi:shoe-print"
  #   #update_interval: 100ms
  #   filters:
    # - lambda: |-
  #       float pressure_value = x; 
        
  #       pressure_value = (pressure_value - id(voltage_max)) * (100 - 1) / (id(voltage_min) - id(voltage_max)) + 1;
  #       if (pressure_value > 100) {
  #         pressure_value = 100;
  #       } else if (pressure_value < 1) {
  #         pressure_value = 1;
  #       }

  #       if (pressure_value >= id(step_threshold)) {
  #         id(pressure_trigger).turn_on();
  #         if (id(toggle_state) == 0) {
  #           id(pressure_toggle).toggle();
  #           id(toggle_state) = 1;
  #         }
  #       } else {
  #         id(pressure_trigger).turn_off();
  #         if (id(toggle_state) == 1) {
  #           id(toggle_state) = 0;
  #         }
  #       }

  #       return pressure_value;

number:
  - platform: template
    name: "Step Detect On"
    id: step_detect_on_input
    unit_of_measurement: "V"
    update_interval: never
    initial_value: '${step_on_threshold_value}'
    min_value: 0.8
    max_value: 2.5
    step: 0.01
    optimistic: True
    on_value:
      then:
        - globals.set:
            id: step_on_threshold
            value: !lambda "return x;"
  - platform: template
    name: "Step Detect Off"
    unit_of_measurement: "V"
    id: step_detect_off_input
    update_interval: never
    initial_value: '${step_off_threshold_value}'
    min_value: 0.8
    max_value: 2.5
    step: 0.01
    optimistic: true
    on_value:
      then:
        - globals.set:
            id: step_off_threshold
            value: !lambda "return x;"



# number:
#   - platform: template
#     name: "Step Threshold"
#     id: step_threshold_input
#     update_interval: never
#     initial_value: 50.0
#     min_value: 1.0
#     max_value: 100.0
#     step: 1.0
#     optimistic: True
#     on_value:
#       then:
#         - globals.set:
#             id: step_threshold
#             value: !lambda "return x;"
#   - platform: template
#     name: "Voltage Max"
#     id: voltage_max_input
#     update_interval: never
#     initial_value: 2.5
#     min_value: 1.0
#     max_value: 3.0
#     step: 0.1
#     optimistic: true
#     on_value:
#       then:
#         - globals.set:
#             id: voltage_max
#             value: !lambda "return x;"
#   - platform: template
#     name: "Voltage Min"
#     id: voltage_min_input
#     update_interval: never
#     initial_value: 0.9
#     min_value: 0.5
#     max_value: 1.5
#     step: 0.1
#     optimistic: true
#     on_value:
#       then:
#         - globals.set:
#             id: voltage_min
#             value: !lambda "return x;"


switch:
  - platform: template
    name: "Pressure Trigger"
    id: pressure_trigger
    optimistic: true
  - platform: template
    name: "Pressure Toggle"
    id: pressure_toggle
    optimistic: true    
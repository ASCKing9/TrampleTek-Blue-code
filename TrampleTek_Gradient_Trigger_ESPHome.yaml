# esphome:
#   name: [Your internal devices name]
#   friendly_name: [The name you gave the device]

# esp32:
#   board: esp32-c3-devkitm-1
#   framework:
#     type: arduino

# # Enable logging
# logger:

# # Enable Home Assistant API
# api:
#   encryption:
#     key: "[The encryption key that you set up, if you installed it]"
# ota:

# wifi:
#   ssid: !secret wifi_ssid
#   password: !secret wifi_password

#   # Enable fallback hotspot (captive portal) in case wifi connection fails
#   ap:
#     ssid: "[your devices wifi]"
#     password: "[your device password]"

# captive_portal:

### Above this line is a typical default ESPHome config.
### You don't need to copy the code above, it is there as reference.
### You only need to paste the code below 

globals:
  - id: adc_readings
    type: std::vector<float>
    restore_value: no
    initial_value: '{0, 0, 0}'

  - id: gradient_limit
    type: float
    restore_value: no
    initial_value: '0.2'

  - id: on_going_mat_event
    type: bool
    restore_value: yes
    initial_value: 'false'

sensor:
  - platform: adc
    pin: 0
    name: "internal pressure voltage internal"
    id: pressure_adc_voltage_internal
    update_interval: 75ms
    attenuation: auto
    internal: True
    filters:
      - sliding_window_moving_average:
          window_size: 3
          send_every: 1    
          
  - platform: template
    name: "Pressure Voltage"
    id: visible_pressure_voltage
    unit_of_measurement: "V"
    icon: "mdi:sine-wave"
    accuracy_decimals: 2
    update_interval: 1s
    lambda: return id(pressure_adc_voltage_internal).state;

  - platform: template
    name: "Pressure Voltage Trend Analysis internal"
    id: pressure_voltage_trend_internal
    unit_of_measurement: "V/s"
    icon: "mdi:sine-wave"
    accuracy_decimals: 3
    update_interval: 225ms  # Match the ADC reading rate 225
    internal: True
    lambda: |-
        // Shift and store the latest reading
        id(adc_readings).erase(id(adc_readings).begin());
        id(adc_readings).push_back(id(pressure_adc_voltage_internal).state);
        
        // Check the gradient
        float gradient10; // compare adc readings [1] and [0]
        float gradient21; // compare adc readings [2] and [1]
        float gradient20; // compare adc readings [2] and [0]

        gradient10 = (id(adc_readings)[1] - id(adc_readings)[0]) / 0.225;
        gradient21 = (id(adc_readings)[2] - id(adc_readings)[1]) / 0.225;
        gradient20 = (id(adc_readings)[2] - id(adc_readings)[0]) / 0.450; // adjusted for twice the time

        // Determine the largest gradient by magnitude
        float largest_gradient = std::max(std::fabs(gradient10), std::max(std::fabs(gradient21), std::fabs(gradient20)));
        
        // Now, apply the correct sign to the largest gradient
        if (std::fabs(gradient10) == largest_gradient) {
          largest_gradient = gradient10;
        } else if (std::fabs(gradient21) == largest_gradient) {
          largest_gradient = gradient21;
        } else if (std::fabs(gradient20) == largest_gradient) {
          largest_gradient = gradient20;
        }

        if (largest_gradient > id(gradient_limit)) {
          id(pressure_trigger).turn_off();
          id(on_going_mat_event) = false;
          return largest_gradient;
        }

        if (largest_gradient < (-1 * id(gradient_limit))) {
          id(pressure_trigger).turn_on();
          if (!id(on_going_mat_event)) {
            id(pressure_toggle).toggle();
          }
          id(on_going_mat_event) = true;
          return largest_gradient;
        }

        return 0;
        
    on_value_range:
      - above: !lambda return id(gradient_limit);
        then:
          - sensor.template.publish:
              id: pressure_voltage_trend
              state: !lambda return id(pressure_voltage_trend_internal).state;
      - below: !lambda return -1*id(gradient_limit);
        then:
          - sensor.template.publish:
              id: pressure_voltage_trend
              state: !lambda return id(pressure_voltage_trend_internal).state;

  - platform: template
    name: "Pressure Trend Analysis"
    id: pressure_voltage_trend
    unit_of_measurement: "V/s"
    icon: "mdi:sine-wave"
    accuracy_decimals: 3
    lambda: return id(pressure_voltage_trend_internal).state;
        

number:
  - platform: template
    name: "Gradient Detector"
    id: gradient_detector_input
    unit_of_measurement: "V/s"
    update_interval: never
    initial_value: 0.1
    min_value: 0.01
    max_value: 0.3
    step: 0.01
    optimistic: True
    on_value:
      then:
        - globals.set:
            id: gradient_limit
            value: !lambda "return x;"

switch:
  - platform: template
    name: "Pressure Trigger"
    id: pressure_trigger
    optimistic: true
  - platform: template
    name: "Pressure Toggle"
    id: pressure_toggle
    optimistic: true    
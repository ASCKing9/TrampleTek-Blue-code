esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: true

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:

api:

ota:
  - platform: esphome

wifi:
  fast_connect: ${hidden_ssid}

wifi:
  output_power: 8.5dB #!! MAKE SURE TO HAVE THIS LINE!!!!!!!!!!!!!!! It's known issue with Wemos Lolin c3 mini's that are in the mat
  fast_connect: "false"

globals:
  - id: step_event_threshold
    type: float
    restore_value: yes
    initial_value: '0.08'
  - id: matGradientReq
    type: float
    restore_value: yes
    initial_value: '0.12'
  - id: matDataSampledAvg
    type: float
    restore_value: yes
    initial_value: '1.8'

binary_sensor:
  - platform: template
    name: "Mat Sensor"
    id: Mat_binary_trigger
  
select:
  - platform: template
    name: On/Off Sensitivity
    id: mat_sensitivity_select
    options:
     - "Low weight object (<1 lb) on an uncovered mat, or a heavy weight object on a heavy weight covered mat (e.g. adult human with mat under mattress). Very sensitive, may cause false triggering" # step_event_threshold = 0.06, matGradientReq = 0.04
     - "Low weight object (~1 lb) on an uncovered mat, or a heavy weight object on a medium weight covered mat (e.g. adult human with mat under rug)." # step_event_threshold = 0.12, matGradientReq = 0.08
     - "Medium weight object (~1-20 lb) on an uncovered mat, or a heavy weight object on a light weight covered mat (e.g. adult human with mat under light rug)." # step_event_threshold = 0.48, matGradientReq = 0.20
     - "Heavy weight object (>20 lb) on an uncovered mat, not likely to work well if mat is covered" # step_event_threshold = 0.70, matGradientReq = 0.25
     - "Custom"
    initial_option: "Low weight object (~1 lb) on an uncovered mat, or a heavy weight object on a medium weight covered mat (e.g. adult human with mat under rug)."
    optimistic: true
    restore_value: true
    on_value:
      then:
        - lambda: |-
            auto index = id(mat_sensitivity_select).active_index();
            if (index == 0) {
              id(step_event_threshold) = 0.06;
              id(matGradientReq) = 0.04;
            } else if (index == 1) {
              id(step_event_threshold) = 0.12;
              id(matGradientReq) = 0.08;
            } else if (index == 2) {
              id(step_event_threshold) = 0.48;
              id(matGradientReq) = 0.20;
            } else if (index == 3) {
              id(step_event_threshold) = 0.70;
              id(matGradientReq) = 0.25;
            }

            if (x != "Custom"){
              id(gradient_requirement_number).publish_state(id(matGradientReq));
              id(step_threshold_number).publish_state(id(step_event_threshold));
            }

number:
  - platform: template
    name: "Change in pressure needed to trigger mat"
    id: step_threshold_number
    unit_of_measurement: "V"
    update_interval: never
    restore_value: true
    min_value: 0.02
    max_value: 0.8
    step: 0.02
    optimistic: true
    on_value:
      then:
        - globals.set:
            id: step_event_threshold
            value: !lambda "return x;"
        - select.set:
            id: mat_sensitivity_select
            option: "Custom"

  - platform: template
    name: "Speed of pressure requirement"
    id: gradient_requirement_number
    unit_of_measurement: "V/s"
    restore_value: true
    update_interval: never
    min_value: 0.02
    max_value: 0.6
    step: 0.02
    optimistic: true
    on_value:
      then:
        - globals.set:
            id: matGradientReq
            value: !lambda "return x;"
        - select.set:
            id: mat_sensitivity_select
            option: "Custom"

sensor:            
  - platform: template
    name: "Pressure Voltage"
    id: visible_pressure_voltage
    unit_of_measurement: "V"
    icon: "mdi:sine-wave"
    accuracy_decimals: 3
    update_interval: 1s
    lambda: |-
      return id(matDataSampledAvg);

interval:
  - interval: 50ms
    then:
      lambda: |-
        // Threshold variables
        static bool matDownThresholdLock = false;
        static bool matUpThresholdLock = false;
        static bool justFlippedOff = false;
        static bool justFlippedOn = false;
        static float matDownThreshold = id(matDataSampledAvg) - id(step_event_threshold);
        static float matUpThreshold = id(matDataSampledAvg) + id(step_event_threshold);

        // Gradient variables
        static bool matGradientDownApproved = false;
        static bool matGradientUpApproved = false;
        static unsigned long matDownThresholdCounter;
        static unsigned long matUpThresholdCounter;
        static unsigned long matGradientDownCounter;
        static unsigned long matGradientUpCounter;
        static unsigned long matGradientTimer = 5000;
        static unsigned long matThresholdTimer = 5000;
        static float previous_matDataAvg = 0;
        unsigned long currentTime = millis();

        // mat sampling variables
        static int startUpFlag = 1;
        static const int sliderWindowSize = 7;
        static float matDataBuffer[sliderWindowSize] = { 0.0 };
        static int bufferIndex = 0;
        int voltSampleAvg = 100;
        float matDataAvg;

        // on first run through fill the matDataBuffer with the restored value if possible
        if (startUpFlag) {
          for (int i = 0; i < sliderWindowSize; i++) {
            matDataBuffer[i] = id(matDataSampledAvg);
          }
        }

        // Need to grab 100 samples to get a better average without sampling HA with values
        int rawDataSum = 0;
        for (int i = 0; i < voltSampleAvg; i++) {
          rawDataSum += analogRead(0);
        }
        // The array of sampled matData of the last sliderWindowSize iterations
        matDataBuffer[bufferIndex] = (rawDataSum / voltSampleAvg) * (3.3 / 4095.0);  // Convert to voltage

        // Average the sampled matData
        float matDataSum = 0;
        for (int i = 0; i < sliderWindowSize; i++) {
          matDataSum += matDataBuffer[i];
        }
        matDataAvg = matDataSum / sliderWindowSize;

        // Find the gradient between the last matDataAvg and current matDataAvg
        float matGradient = (matDataAvg - previous_matDataAvg) / 0.075;            

        if (matDownThresholdLock == true && justFlippedOff == true) {
          matDownThresholdLock = false;
        }
        if (matGradient < -1 * id(matGradientReq)) {
            matGradientDownApproved = true;
            matGradientDownCounter = currentTime;
            if (matDownThresholdLock == false) {
              matDownThreshold = matDataAvg - id(step_event_threshold);
              matUpThreshold = matDataAvg + 1.0;
              matDownThresholdLock = true;
              matDownThresholdCounter = currentTime;
            }
        }

        if (matUpThresholdLock == true && justFlippedOn == true) {
          matUpThresholdLock = false;
        }
        if (matGradient > id(matGradientReq)) {
          matGradientUpApproved = true;
          matGradientUpCounter = currentTime;
          if (matUpThresholdLock == false) {
            float scaleThreshold;
            if (id(step_event_threshold) < 0.2) {
              scaleThreshold = 0.7;
              } else if (id(step_event_threshold) < 0.5) {
              scaleThreshold = 0.5;
              } else {
              scaleThreshold = 0.3;
              }
            matUpThreshold = matDataAvg + id(step_event_threshold) * scaleThreshold; // Recovery can be slower, reduces the threshold requirement
            matDownThreshold = matDataAvg - 1.0;
            matUpThresholdLock = true;
            matUpThresholdCounter = currentTime;
          }
        }

        if (matDownThresholdLock) {
          if (currentTime - matDownThresholdCounter >= matThresholdTimer) {
            matDownThresholdLock = false;
          }
        }

        if (matUpThresholdLock) {
          if (currentTime - matUpThresholdCounter >= matThresholdTimer) {
            matUpThresholdLock = false;
          }
        }

        if (matGradientDownApproved == true) {
          if (currentTime - matGradientDownCounter >= matGradientTimer) {
            matGradientDownApproved = false;
          }
        }

        if (matGradientUpApproved == true) {
          if (currentTime - matGradientUpCounter >= matGradientTimer) {
            matGradientUpApproved = false;
          }
        }

        justFlippedOn = false;
        justFlippedOff = false;

        if (matDataAvg < matDownThreshold && matGradientDownApproved) {
          justFlippedOn = true;
          // id(pressure_trigger).turn_on();
          id(Mat_binary_trigger).publish_state(true);
        }

        if (matDataAvg > matUpThreshold && matGradientUpApproved) {
          justFlippedOff = true;
          // id(pressure_trigger).turn_off();
          id(Mat_binary_trigger).publish_state(false);
        }

        id(matDataSampledAvg) = matDataAvg;
        bufferIndex = (bufferIndex + 1) % sliderWindowSize;
        previous_matDataAvg = matDataAvg;
        startUpFlag = 0;            
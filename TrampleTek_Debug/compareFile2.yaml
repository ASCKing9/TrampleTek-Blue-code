interval:
  - interval: 50ms
    then:
      lambda: |-
        // Butterworth low-pass filter coefficients for the main signal (0.5 Hz cutoff)
        static const float lowPassB[] = {0.07295966, 0.07295966};  // Numerator coefficients
        static const float lowPassA[] = {1.0, -0.85408069};        // Denominator coefficients

        // Butterworth low-pass filter coefficients for the threshold signal (0.01 Hz cutoff)
        const float thresholdB[] = {0.00156833, 0.00156833};  // Numerator coefficients
        const float thresholdA[] = {1.0, -0.99686333};        // Denominator coefficients

        // Variables for the main low-pass filter
        static float lowPassPrevInput = 0;          // Stores the last input value for low-pass filter
        static float lowPassPrevOutput = 0;         // Stores the last output value for low-pass filter

        // Variables for the threshold low-pass filter
        static float thresholdPrevInput = 0;        // Stores the last input value for threshold filter
        static float thresholdPrevOutput = 0;       // Stores the last output value for threshold filter

        // Long-term event tracking
        static unsigned long lastEventTime = 0;                             // Time of the last detected event
        static const unsigned long noEventThreshold = 10 * 60 * 1000;        // 10 minutes in milliseconds

        // Transition validation timers
        static unsigned long offValidationStartTime = 0;          // Start time for "off" validation timer
        static bool validatingOffTransition = false;              // Flag to indicate "off" validation period
        const unsigned long offValidationDuration = 10000;        // 10-second timer for "off" transition

        static unsigned long onValidationStartTime = 0;           // Start time for "on" validation timer
        static bool validatingOnTransition = false;               // Flag to indicate "on" validation period
        const unsigned long onValidationDuration = 5000;          // 5-second timer for "on" transition

        // Calibration variables
        static float calibrationMax = 0.0;    // Set to minimum possible signal value
        static float calibrationMin = 3.3;    // Set to maximum possible signal value
        static float sensitivityBase = 0.002; // Initial base for the number template ID: sensitivity_number
        static bool wasCalibrating = false;

        // Fixed threshold limits
        float fixedUpperLimit = id(upper_limit_g);         // Fixed upper threshold
        float fixedLowerLimit = id(lower_limit_g);         // Fixed lower threshold

        // Dynamic thresholds
        float dynamicLowerThreshold;   // Lower dynamic threshold
        float dynamicUpperThreshold = fixedUpperLimit; // Dynamic upper threshold set to fixed upper limit

        // Threshold offset variables
        float dynamicThresholdOffset = id(event_threshold) * sensitivityBase; // Offset for dynamic thresholds relative to the threshold signal
        float longTermThresholdOffset = dynamicThresholdOffset / 2; // Offset for lower threshold after long-term stability

        // Sensor states
        static bool previousIsOnState = id(sensorBoolValue);  // Initialize previous state flag
        bool isOn = id(sensorBoolValue);                      // State flag ("on" or "off")

        // Analog pin reading on Lolin C3-Mini board
        int analogPin = 0;

        static bool startUpFlag = true;
        // Start up values for signal and threshold filters
        if (startUpFlag) {
          // Initialize filters with the first input value
          float initialVoltage = analogRead(analogPin) * (3.3 / 4095.0);
          lowPassPrevInput = initialVoltage;
          lowPassPrevOutput = initialVoltage;
          thresholdPrevInput = initialVoltage;
          thresholdPrevOutput = initialVoltage;

          id(Mat_binary_trigger).publish_state(id(sensorBoolValue));
          id(sensitivity_number).publish_state(id(event_threshold));
          id(lower_limit_voltage).publish_state(id(lower_limit_g));
          id(upper_limit_voltage).publish_state(id(upper_limit_g));
        }

        // Step 1: Read the raw signal from the analog pin
        const int numSamples = 100;  // Number of readings for averaging
        float voltageSum = 0;
        for (int i = 0; i < numSamples; i++) {
          voltageSum += analogRead(analogPin);  // Collect raw data
        }
        float voltage = (voltageSum / numSamples) * (3.3 / 4095.0);         // Average of 100 readings and convert to voltage

        // Step 2: Apply the low-pass filter to the main signal
        float lowPassOutput = lowPassB[0] * voltage + lowPassB[1] * lowPassPrevInput - lowPassA[1] * lowPassPrevOutput;
        lowPassPrevInput = voltage;
        lowPassPrevOutput = lowPassOutput;

        // Step 3: Apply the low-pass filter to the voltage signal for the threshold
        float thresholdSignal = thresholdB[0] * voltage + thresholdB[1] * thresholdPrevInput - thresholdA[1] * thresholdPrevOutput;
        thresholdPrevInput = voltage;
        thresholdPrevOutput = thresholdSignal;

        // Step 4: Update Lower dynamic threshold with Long-term adjustment if needed
        if (millis() - lastEventTime > noEventThreshold) {
          // Lower the "on" threshold sensitivity after 10 minutes of no events
          dynamicLowerThreshold = constrain(thresholdSignal - longTermThresholdOffset, fixedLowerLimit, fixedUpperLimit);
        } else {
          dynamicLowerThreshold = constrain(thresholdSignal - dynamicThresholdOffset, fixedLowerLimit, fixedUpperLimit);
        }

        // Step 5: Check for calibration and Handle "on" and "off" states
        if (id(calibration_button).state) {
          id(sample_index) = 0;  // Reset sampleIndex when calibration starts
          // Calibration mode: Track max and min values
          if (lowPassOutput > calibrationMax) {
            calibrationMax = lowPassOutput;
            float truncatedCaliValue = ((int)(calibrationMax * 1000)) / 1000.0; // need to cut down to only 3 decimals
            id(upper_limit_voltage).publish_state(truncatedCaliValue);
          }
          if (lowPassOutput < calibrationMin) {
            calibrationMin = lowPassOutput;
            float truncatedCaliValue = ((int)(calibrationMin * 1000)) / 1000.0; // need to cut down to only 3 decimals
            id(lower_limit_voltage).publish_state(truncatedCaliValue);
          }
        } else {
          if (isOn) {
            // Immediate "off" if low-pass signal exceeds the dynamic upper threshold
            if (lowPassOutput > dynamicUpperThreshold) {
              if (!validatingOffTransition) {
                // Start the validation timer
                offValidationStartTime = millis();
                validatingOffTransition = true;
              } else if (millis() - offValidationStartTime >= offValidationDuration) {
                // Timer expired: Turn "off"
                isOn = false;
                offValidationStartTime = 0;
                validatingOffTransition = false;
                lastEventTime = millis();
              }
            } else {
              // Cancel validation if signal drops below dynamic upper threshold
              offValidationStartTime = 0;
              validatingOffTransition = false;
            }
          } else {
            // Transition to "on" if low-pass signal crosses dynamic lower threshold
            if (lowPassOutput < dynamicLowerThreshold) {
              if (!validatingOnTransition) {
                // Start the validation timer
                onValidationStartTime = millis();
                validatingOnTransition = true;
              } else if (millis() - onValidationStartTime >= onValidationDuration) {
                // Timer expired: Turn "on"
                isOn = true;
                onValidationStartTime = 0;
                validatingOnTransition = false;
                lastEventTime = millis();
              }
            } else {
              // Cancel validation if signal rises above dynamic lower threshold
              onValidationStartTime = 0;
              validatingOnTransition = false;
            }
          }
        }

        // Step 6: Publish new binary state if needed
        if (previousIsOnState != isOn) {
          id(sensorBoolValue) = isOn;
          id(Mat_binary_trigger).publish_state(id(sensorBoolValue));
        }
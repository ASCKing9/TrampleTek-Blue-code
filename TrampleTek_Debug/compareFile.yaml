substitutions:
  name: ttb-mat-0490c4
  friendly_name: TTBlue Bedmat3

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  project:
    name: AppliedSensorCo.TrampleTek_Blue
    version: dev

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:

api:

ota:
- platform: esphome

wifi:
  output_power: 8.5dB #!!!!!!!! MAKE SURE TO HAVE THIS LINE!!!!! It's known issue with Wemos Lolin c3 mini's that are in the mat
  ap:
    ssid: TrampleTek Blue Fallback Hotspot

dashboard_import:
  package_import_url: github://ASCKing9/TrampleTek-Blue-code/TrampleTek_WebUSB_ESPHome.yaml@main
  import_full_config: true

improv_serial:

esp32_improv:
  authorizer: none

web_server:

captive_portal:

globals:
  - id: event_threshold
    type: int
    restore_value: yes
    initial_value: '3'

  - id: filteredMatSignal
    type: float
    restore_value: yes
    initial_value: '1.8'

  - id: sensorBoolValue
    type: bool
    initial_value: 'false'
    restore_value: yes
    
  - id: matDownThresholdID
    type: float
    restore_value: yes
    initial_value: '1.5'

  - id: matUpThresholdID
    type: float
    restore_value: yes
    initial_value: '3.0'

  - id: lower_limit_g
    type: float
    restore_value: yes
    initial_value: '1.5'
    
  - id: upper_limit_g
    type: float
    restore_value: yes
    initial_value: '2.5'

binary_sensor:
  - platform: template
    name: "Mat Sensor"
    id: Mat_binary_trigger

number:
  - platform: template
    name: "Sensitivity (Higher is more sensitive to motion)"
    id: sensitivity_number
    update_interval: never
    initial_value: 3
    min_value: 1
    max_value: 10
    step: 1
    optimistic: true
    restore_value: true
    on_value:
      then:
        - lambda: |-
            id(event_threshold) = x;
  
  - platform: template
    name: "Empty Bed value"
    id: upper_limit_voltage
    unit_of_measurement: "V"
    update_interval: never
    initial_value: 1.9
    min_value: 1.0
    max_value: 3.3
    step: 0.001
    optimistic: true
    restore_value: true
    on_value:
      then:
        - lambda: |-
            id(upper_limit_g) = x;
  
  - platform: template
    name: "Full Bed value"
    id: lower_limit_voltage
    unit_of_measurement: "V"
    update_interval: never
    initial_value: 1.8
    min_value: 1.0
    max_value: 3.3
    step: 0.001
    optimistic: true
    restore_value: true
    on_value:
      then:
        - lambda: |-
            id(lower_limit_g) = x;

# Un-comment this sensor to watch the sensor is real-time
sensor:            
  - platform: template
    name: "Pressure Voltage"
    id: visible_pressure_voltage
    unit_of_measurement: "V"
    icon: "mdi:sine-wave"
    accuracy_decimals: 3
    update_interval: 1s
    lambda: |-
      return id(filteredMatSignal);
  
  - platform: template
    name: "matDownThreshold"
    id: visible_matDownThreshold
    unit_of_measurement: "V"
    icon: "mdi:sine-wave"
    accuracy_decimals: 3
    update_interval: 1s
    lambda: |-
      return id(matDownThresholdID);

  - platform: template
    name: "matUpThreshold"
    id: visible_matUpThreshold
    unit_of_measurement: "V"
    icon: "mdi:sine-wave"
    accuracy_decimals: 3
    update_interval: 1s
    lambda: |-
      return id(matUpThresholdID);

switch:
  - platform: template
    name: "Calibration (turn on, lay on bed for at least 30s, get out of bed, turn off)"
    id: calibration_button
    optimistic: true

interval:
  - interval: 50ms
    then:
      lambda: |-
        // Butterworth low-pass filter coefficients for the main signal (0.5 Hz cutoff)
        static const float lowPassB[] = {0.07295966, 0.07295966};  // Numerator coefficients
        static const float lowPassA[] = {1.0, -0.85408069};        // Denominator coefficients

        // Butterworth low-pass filter coefficients for the threshold signal (0.05 Hz cutoff)
        //static const float thresholdB[] = {0.00779294, 0.00779294};  // Numerator coefficients
        //static const float thresholdA[] = {1.0, -0.98441413};        // Denominator coefficients

        // Butterworth low-pass filter coefficients for the threshold signal (0.03 Hz cutoff)
        //const float thresholdB[] = {0.00469032, 0.00469032};  // Numerator coefficients
        //const float thresholdA[] = {1.0, -0.99061936};        // Denominator coefficients

        // Butterworth low-pass filter coefficients for the threshold signal (0.01 Hz cutoff)
        const float thresholdB[] = {0.00156833, 0.00156833};  // Numerator coefficients
        const float thresholdA[] = {1.0, -0.99686333};        // Denominator coefficients

        // Variables for the main low-pass filter
        static float lowPassPrevInput = 0;          // Stores the last input value for low-pass filter
        static float lowPassPrevOutput = 0;         // Stores the last output value for low-pass filter

        // Variables for the threshold low-pass filter
        static float thresholdPrevInput = 0;        // Stores the last input value for threshold filter
        static float thresholdPrevOutput = 0;       // Stores the last output value for threshold filter

        // Long-term event tracking
        static unsigned long lastEventTime = 0;                             // Time of the last detected event
        static const unsigned long noEventThreshold = 10 * 60 * 1000;        // 10 minutes in milliseconds

        // Off transition validation
        static unsigned long offValidationStartTime = 0;          // Start time for "off" validation timer
        static bool validatingOffTransition = false;              // Flag to indicate "off" validation period
        const unsigned long offValidationDuration = 10000;         // 5-second timer for "off" transition

        // Calibration variables
        static float calibrationMax = 0.0;    // Set to minimum possible signal value
        static float calibrationMin = 3.3;    // Set to maximum possible signal value
        static float sensitivityBase = 0.002; // Initial base for the number template ID: sensitivity_number
        static bool wasCalibrating = false;
        

        // Fixed threshold limits
        float fixedUpperLimit = id(upper_limit_g);         // Fixed upper threshold
        float fixedLowerLimit = id(lower_limit_g);         // Fixed lower threshold

        // Dynamic thresholds
        float dynamicUpperThreshold;   // Upper dynamic threshold
        float dynamicLowerThreshold;   // Lower dynamic threshold

        // Threshold offset variables
        float dynamicThresholdOffset = id(event_threshold) * sensitivityBase; // Offset for dynamic thresholds relative to the threshold signal
        float longTermThresholdOffset = dynamicThresholdOffset / 2; // Offset for lower threshold after long-term stability

        // Sensor states
        static bool previousIsOnState = id(sensorBoolValue);  // Initialize previous state flag
        bool isOn = id(sensorBoolValue);                      // State flag ("on" or "off")

        // Analog pin reading on Lolin C3-Mini board
        int analogPin = 0;
        
        static bool startUpFlag = true;
        // Start up values for signal and threshold filters
        if (startUpFlag) {
          // Initialize filters with the first input value
          float initialVoltage = analogRead(analogPin) * (3.3 / 4095.0);
          lowPassPrevInput = initialVoltage;
          lowPassPrevOutput = initialVoltage;
          thresholdPrevInput = initialVoltage;
          thresholdPrevOutput = initialVoltage;
          
          id(Mat_binary_trigger).publish_state(id(sensorBoolValue));
          id(sensitivity_number).publish_state(id(event_threshold));
          id(lower_limit_voltage).publish_state(id(lower_limit_g));
          id(upper_limit_voltage).publish_state(id(upper_limit_g));
        }
     
        // Step 1: Read the raw signal from the analog pin
        const int numSamples = 100;  // Number of readings for averaging
        float voltageSum = 0;
        for (int i = 0; i < numSamples; i++) {
          voltageSum += analogRead(analogPin);  // Collect raw data
        }
        float voltage = (voltageSum / numSamples) * (3.3 / 4095.0);         // Average of 100 readings and convert to voltage

        // Step 2: Apply the low-pass filter to the main signal
        float lowPassOutput = lowPassB[0] * voltage + lowPassB[1] * lowPassPrevInput - lowPassA[1] * lowPassPrevOutput;
        lowPassPrevInput = voltage;
        lowPassPrevOutput = lowPassOutput;

        // Step 3: Apply the low-pass filter to the voltage signal for the threshold
        float thresholdSignal = thresholdB[0] * voltage + thresholdB[1] * thresholdPrevInput - thresholdA[1] * thresholdPrevOutput;
        thresholdPrevInput = voltage;
        thresholdPrevOutput = thresholdSignal;

        // Step 4: Update Upper dynamic threshold
        dynamicUpperThreshold = constrain(thresholdSignal + dynamicThresholdOffset, fixedLowerLimit, fixedUpperLimit);
        
        // Step 5: Update Lower dynamic threshold with Long-term adjustment if needed
        if (millis() - lastEventTime > noEventThreshold) {
          // Lower the "on" threshold sensitivity after 10 minutes of no events
          dynamicLowerThreshold = constrain(thresholdSignal - longTermThresholdOffset, fixedLowerLimit, fixedUpperLimit);
        } else {
          dynamicLowerThreshold = constrain(thresholdSignal - dynamicThresholdOffset, fixedLowerLimit, fixedUpperLimit);
        }

        // Step 6: Check for calibration and Handle "on" and "off" states
        if (id(calibration_button).state) {
          // Calibration mode: Track max and min values
          if (lowPassOutput > calibrationMax) {
            calibrationMax = lowPassOutput;
            float truncatedCaliValue = ((int)(calibrationMax * 1000)) / 1000.0; // need to cut down to only 3 decimals  
            id(upper_limit_voltage).publish_state(truncatedCaliValue);
          }
          if (lowPassOutput < calibrationMin) {
            calibrationMin = lowPassOutput;
            float truncatedCaliValue = ((int)(calibrationMin * 1000)) / 1000.0; // need to cut down to only 3 decimals  
            id(lower_limit_voltage).publish_state(truncatedCaliValue);
          }
        } else {
          if (isOn) {
            // Immediate "off" if low-pass signal exceeds the fixed upper limit
            if (lowPassOutput > fixedUpperLimit) {
              isOn = false;
              offValidationStartTime = 0;
              validatingOffTransition = false;
              lastEventTime = millis();
            }
            // Validate "off" transition if the low-pass signal crosses the dynamic upper threshold
            else if (lowPassOutput > dynamicUpperThreshold) {
              if (!validatingOffTransition) {
                // Start the validation timer
                offValidationStartTime = millis();
                validatingOffTransition = true;
              } else if (millis() - offValidationStartTime >= offValidationDuration) {
                // Timer expired: Turn "off"
                isOn = false;
                offValidationStartTime = 0;
                validatingOffTransition = false;
                lastEventTime = millis();
              }
            } else {
              // Cancel validation if signal drops below dynamic upper threshold
              offValidationStartTime = 0;
              validatingOffTransition = false;
            }
          } else {
            // Transition to "on" if low-pass signal crosses dynamic lower threshold
            if (lowPassOutput < dynamicLowerThreshold) {
              isOn = true;
              lastEventTime = millis();
            }
          }
        }
        
        // Step 7: Publish new binary state if needed
        if (previousIsOnState != isOn) {
          id(sensorBoolValue) = isOn;
          id(Mat_binary_trigger).publish_state(id(sensorBoolValue));
        }

        // Step 8: Finalize Calibration if button is turned off
        if (!id(calibration_button).state && wasCalibrating) {
          float signalDifference = calibrationMax - calibrationMin;

          // Update what each step in the number template ID: sensitivity_number represents and reset to 3
          sensitivityBase = signalDifference / 20.0; // 20 steps, 
          id(sensitivity_number).publish_state(3);

          // Adjust the limits by a percentage of the signalDifference, based on a typical 30s calibration time and personal heuristics
          calibrationMin  = calibrationMin - (signalDifference * 0.1); // shift lower limit down by 10% of signalDifference
          float truncatedCaliValue = ((int)(calibrationMin * 1000)) / 1000.0; // need to cut down to only 3 decimals  
          id(lower_limit_voltage).publish_state(truncatedCaliValue);

          calibrationMax  = calibrationMax - (signalDifference * 0.5); // shift upper limit down by 50% of signalDifference
          truncatedCaliValue = ((int)(calibrationMax * 1000)) / 1000.0; // need to cut down to only 3 decimals  
          id(upper_limit_voltage).publish_state(truncatedCaliValue);

          calibrationMax = 0.0;  // Reset for future calibration
          calibrationMin = 3.3;
          wasCalibrating = false;
        } else if (id(calibration_button).state) {
          wasCalibrating = true;
        }

        // Step 9: Update persistent variables
        id(filteredMatSignal) = lowPassOutput;
        id(matDownThresholdID) = dynamicLowerThreshold;
        id(matUpThresholdID) = dynamicUpperThreshold;
        previousIsOnState = id(sensorBoolValue);
        startUpFlag = false;

        /*______________________________________________________
        ______________________________________________________
        ______________________________________________________
        ______________________________________________________

        // Threshold variables
        static bool matDownThresholdLock = false;
        static bool matUpThresholdLock = false;
        static bool justFlippedOff = false;
        static bool justFlippedOn = false;
        static bool previousSensorBool;
        static float matDownThreshold = id(matDataSampledAvg) - id(event_threshold);
        static float matUpThreshold = id(matDataSampledAvg) + id(event_threshold);

        // Gradient variables
        static bool matGradientDownApproved = false;
        static bool matGradientUpApproved = false;
        static unsigned long matDownThresholdCounter;
        static unsigned long matUpThresholdCounter;
        static unsigned long matGradientDownCounter;
        static unsigned long matGradientUpCounter;
        static unsigned long matGradientTimer = 45000;
        static unsigned long matThresholdTimer = 45000;
        static float previous_matDataAvg = 0;
        unsigned long currentTime = millis();

        // Delayed triggering variables
        static unsigned long matTriggerCounter;
        static unsigned long matTriggerTimer = 5000;
        static bool matTriggerDelayOn = false;

        // mat sampling variables
        static int startUpFlag = 1;
        static const int sliderWindowSize = 7;
        static float matDataBuffer[sliderWindowSize] = { 0.0 };
        static int bufferIndex = 0;
        int voltSampleAvg = 100;
        float matDataAvg;

        // calibration variables
        static float calibrationMatDataStart;
        static bool calibrationFirstLoop = true;
        static float prevCalibrationChange = 0;
        static float gradCalibrationMin = 0;
        float calibrationChange = 0;

        // on first run through fill the matDataBuffer with the restored value if possible
        if (startUpFlag) {
          for (int i = 0; i < sliderWindowSize; i++) {
            matDataBuffer[i] = id(matDataSampledAvg);
          }
          previousSensorBool = id(Mat_binary_trigger).state;
          id(Mat_binary_trigger).publish_state(id(sensorBoolValue));
        }

        // Need to grab 100 samples to get a better average without sampling HA with values
        int rawDataSum = 0;
        for (int i = 0; i < voltSampleAvg; i++) {
          rawDataSum += analogRead(0);
        }
        // The array of sampled matData of the last sliderWindowSize iterations
        matDataBuffer[bufferIndex] = (rawDataSum / voltSampleAvg) * (3.3 / 4095.0);  // Convert to voltage

        // Average the sampled matData
        float matDataSum = 0;
        for (int i = 0; i < sliderWindowSize; i++) {
          matDataSum += matDataBuffer[i];
        }
        matDataAvg = matDataSum / sliderWindowSize;

        // Find the gradient between the last matDataAvg and current matDataAvg
        // on first run through set the gradient to zero
        float matGradient;
        if (startUpFlag) {
          matGradient = 0;
        } else {
          matGradient = (matDataAvg - previous_matDataAvg) / 0.050;   // difference divided by interval
        }            

        if (matDownThresholdLock == true && justFlippedOff == true) {
          matDownThresholdLock = false;
        }
        if (matGradient < -1 * id(matGradientReq)) {
            matGradientDownApproved = true;
            matGradientDownCounter = currentTime;
            if (matDownThresholdLock == false) {
              matDownThreshold = previous_matDataAvg - id(event_threshold);
              //matUpThreshold = previous_matDataAvg;
              id(visible_matDownThreshold).publish_state(matDownThreshold);
              matDownThresholdLock = true;
              matDownThresholdCounter = currentTime;
            }
        }

        if (matUpThresholdLock == true && justFlippedOn == true) {
          matUpThresholdLock = false;
        }
        if (matGradient > id(matGradientReq)) { // mat can be slower to recover, reduces up requirement
          matGradientUpApproved = true;
          matGradientUpCounter = currentTime;
          if (matUpThresholdLock == false) {
            float scaleThreshold;
            if (id(event_threshold) < 0.2) {
              scaleThreshold = 1.0;
              } else if (id(event_threshold) < 0.5) {
              scaleThreshold = 0.4;
              } else {
              scaleThreshold = 0.3;
              }
            matUpThreshold = previous_matDataAvg + id(event_threshold) * scaleThreshold; // Recovery can be slower, reduces the threshold requirement
            //matDownThreshold = previous_matDataAvg;
            id(visible_matUpThreshold).publish_state(matUpThreshold);
            matUpThresholdLock = true;
            matUpThresholdCounter = currentTime;
          }
        }

        if (matDownThresholdLock) {
          if (currentTime - matDownThresholdCounter >= matThresholdTimer) {
            matDownThresholdLock = false;
          }
        }

        if (matUpThresholdLock) {
          if (currentTime - matUpThresholdCounter >= matThresholdTimer) {
            matUpThresholdLock = false;
          }
        }

        if (matGradientDownApproved == true) {
          if (currentTime - matGradientDownCounter >= matGradientTimer) {
            matGradientDownApproved = false;
          }
        }

        if (matGradientUpApproved == true) {
          if (currentTime - matGradientUpCounter >= matGradientTimer) {
            matGradientUpApproved = false;
          }
        }

        justFlippedOn = false;
        justFlippedOff = false;
        float upperOffLimit = 1.872;
        float lowOnLimit = 1.850;

        if ((matDataAvg < matDownThreshold && matGradientDownApproved) && ((matDataAvg < upperOffLimit))) {
          if (id(Mat_binary_trigger).state != true){
            justFlippedOn = true;
            id(sensorBoolValue) = true;
            //id(Mat_binary_trigger).publish_state(id(sensorBoolValue));
          }
        }

        if (matTriggerDelayOn == false){
          if ((matDataAvg > matUpThreshold && matGradientUpApproved) || (matDataAvg > upperOffLimit)) {
            matTriggerDelayOn = true;
            matTriggerCounter = currentTime;
          }
        } else {
          if (currentTime - matTriggerCounter >= matTriggerTimer) {
            if (matDataAvg > matUpThreshold || matDataAvg > upperOffLimit) {
              if (id(Mat_binary_trigger).state != false){
                justFlippedOff = true;
                id(sensorBoolValue) = false;
                //id(Mat_binary_trigger).publish_state(id(sensorBoolValue));
              }
            }
            matTriggerDelayOn = false;
          }
        } 

        //if (matDataAvg > matUpThreshold && matGradientUpApproved) {
        //  justFlippedOff = true;
        //  id(Mat_binary_trigger).publish_state(false);
        //}

        if (matDataAvg < lowOnLimit) {
          if (id(Mat_binary_trigger).state != true){
            justFlippedOn = true;
            id(sensorBoolValue) = true;
            //id(Mat_binary_trigger).publish_state(id(sensorBoolValue));
          }
        }

        if (previousSensorBool != id(sensorBoolValue)) {
          id(Mat_binary_trigger).publish_state(id(sensorBoolValue));
        }

        if (id(calibration_button).state == true) {
          if (calibrationFirstLoop == true) {
            calibrationFirstLoop = false;
            calibrationMatDataStart = matDataAvg;
            id(event_threshold) = 0.00;
            id(step_threshold_number).publish_state(0.00);
          } else {
            calibrationChange = (calibrationMatDataStart - matDataAvg) * 0.6; // reduce the number a little to ensure the mat can reach and go below the calibration threshold
            if (calibrationChange > prevCalibrationChange) {
              float truncatedCaliValue = ((int)(calibrationChange * 1000)) / 1000.0; // need to cut down to only 2 decimals  
              //id(event_threshold) = truncatedCaliValue;
              id(step_threshold_number).publish_state(truncatedCaliValue);

              if (matGradient < gradCalibrationMin) {
                id(matGradientReq) = -1 * matGradient * 0.3;
                gradCalibrationMin = matGradient;
                //id(gradient_requirement_number).publish_state(id(matGradientReq)); // For debugging mat signal gradient
              }
              prevCalibrationChange = calibrationChange;
            }
          }
        } else {
          calibrationFirstLoop = true;
          calibrationChange = 0;
          prevCalibrationChange = 0;
          gradCalibrationMin = 0;
        }

        //id(gradient_viz).publish_state(matGradient); // For debugging mat signal gradient
        id(matDataSampledAvg) = matDataAvg;
        //id(matDownThresholdID) = matDownThreshold;
        //id(matUpThresholdID) = matUpThreshold;
        bufferIndex = (bufferIndex + 1) % sliderWindowSize;
        previousSensorBool = id(Mat_binary_trigger).state;
        previous_matDataAvg = matDataAvg;
        startUpFlag = 0;*/
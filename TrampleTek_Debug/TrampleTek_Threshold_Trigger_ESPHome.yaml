# esphome:
#   name: [Your internal devices name]
#   friendly_name: [The name you gave the device]

# esp32:
#   board: esp32-c3-devkitm-1
#   framework:
#     type: arduino

# # Enable logging
# logger:

# # Enable Home Assistant API
# api:
#   encryption:
#     key: "[The encryption key that you set up, if you installed it]"
# ota:

# wifi:
#   ssid: !secret wifi_ssid
#   password: !secret wifi_password

#   # Enable fallback hotspot (captive portal) in case wifi connection fails
#   ap:
#     ssid: "[your devices wifi]"
#     password: "[your device password]"

# captive_portal:

### Above this line is a typical default ESPHome config.
### You don't need to copy the code above, it is there as reference.
### You only need to paste the code below 

substitutions:
  step_on_threshold_value: "1.09"
  step_off_threshold_value: "1.10"

globals:
  - id: step_on_threshold
    type: float
    restore_value: yes
    initial_value: '${step_on_threshold_value}'
  - id: step_off_threshold
    type: float
    restore_value: yes
    initial_value: '${step_off_threshold_value}'
  - id: on_going_mat_event
    type: bool
    restore_value: yes
    initial_value: 'false'

sensor:
  - platform: adc
    pin: 0
    name: "internal pressure voltage"
    id: pressure_adc_voltage
    update_interval: 75ms
    attenuation: auto
    internal: True
    filters:
      - sliding_window_moving_average:
          window_size: 5
          send_every: 1  
    on_value_range:
      - below: !lambda return id(step_on_threshold);
        then:
          - lambda: |-
              id(pressure_trigger).turn_on();
              if (!id(on_going_mat_event)) {
                id(pressure_toggle).toggle();
              }
              id(on_going_mat_event) = true;
              id(visible_pressure_voltage).publish_state(id(pressure_adc_voltage).state);
      - above: !lambda return id(step_off_threshold);
        then:
          - lambda: |-
              id(pressure_trigger).turn_off();
              id(on_going_mat_event) = false;    
              id(visible_pressure_voltage).publish_state(id(pressure_adc_voltage).state);  
          
  - platform: template
    name: "Pressure Voltage"
    id: visible_pressure_voltage
    unit_of_measurement: "V"
    icon: "mdi:sine-wave"
    accuracy_decimals: 2
    update_interval: 1s
    lambda: !lambda |-
      id(step_detect_on_input).publish_state(id(step_on_threshold));
      id(step_detect_off_input).publish_state(id(step_off_threshold));
      return id(pressure_adc_voltage).state;

number:
  - platform: template
    name: "Step Detect On"
    id: step_detect_on_input
    unit_of_measurement: "V"
    update_interval: never
    initial_value: '${step_on_threshold_value}'
    min_value: 0.8
    max_value: 2.5
    step: 0.01
    optimistic: True
    on_value:
      then:
        - globals.set:
            id: step_on_threshold
            value: !lambda "return x;"
  - platform: template
    name: "Step Detect Off"
    unit_of_measurement: "V"
    id: step_detect_off_input
    update_interval: never
    initial_value: '${step_off_threshold_value}'
    min_value: 0.8
    max_value: 2.5
    step: 0.01
    optimistic: true
    on_value:
      then:
        - globals.set:
            id: step_off_threshold
            value: !lambda "return x;"

switch:
  - platform: template
    name: "Pressure Trigger"
    id: pressure_trigger
    optimistic: true
  - platform: template
    name: "Pressure Toggle"
    id: pressure_toggle
    optimistic: true    